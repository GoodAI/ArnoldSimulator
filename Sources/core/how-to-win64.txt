1) Install Visual Studio 2015 (https://www.visualstudio.com/en-us/downloads/download-visual-studio-vs.aspx)
- in the installation wizard, allow installation of the following components:
    Programming Languages - Visual C++ - Common Tools for Visual C++ 2015
    Windows and Web Development - Universal Windows App Development Tools - Windows 10 SDK
- after installation, launch Visual Studio and go to options to change the default C++ indenting behaviour to use spaces instead of tabs:
    Tools - Options - Text Editor - C/C++ - Tab - Insert spaces

2) Install Cygwin (https://cygwin.com/setup-x86_64.exe)
- in the installation wizard, ensure there are no spaces in the path to Root Install Directory
- in the installation wizard, allow installation of the following components:
    Archive - unzip, Web - wget, Devel - make, Devel - makedepend, Devel - gcc-core
- after installation, go to Cygwin installation directory, open cygwin.bat and insert following line just under @echo off
    call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall" amd64
- add Cygwin bin directory to the system Path variable (e.g. C:\cygwin64\bin)
    Control panel - System - Advanced system settings - Environment Variables - System variables

3) Build dependencies
- run Cygwin via cygwin.bat (not via Desktop or Start menu shortcuts)
    e.g. C:\cygwin64\cygwin.bat
- in the Cygwin command prompt, execute the following commands:
    cd /cygdrive/c/somedir/uba/Arnold/Sources/core/libs/
    ./build-libs-win64.sh all
- note: fatal errors during charm++ compilation are expected (it tries to compile memory allocation and threading implementations opportunistically even for different platforms)

4) Build solution
- open the following solution file in Visual Studio:
    .\core\core.sln
- in Visual Studio, select Debug/Release configuration, go to menu 'Build - Build solution' and wait until the compilation succeeds

5) Launch binaries
- built binaries and their dependencies are to be found under the following directories:
    .\core\debug
    .\core\release
- to run from Visual Studio, go to menu 'Debug - core Properties'
    - select either Debug or Release Configuration
    - go to 'Configuration Properties - Debugging' in the left panel
    - set 'Command arguments' to:
    +p5 +ppn 4 +noisomalloc +LBCommOff +balancer DistributedLB ..\..\..\..\Blueprints\random_blueprint.json
- to run from command line, change either to debug or release directory and run the following command:
    core +p5 +ppn 4 +noisomalloc +LBCommOff +balancer DistributedLB ..\..\..\..\..\Blueprints\random_blueprint.json
- commands above will run single core process on single machine and the specified ammount of cores (e.g. +p3 +ppn 2 to run on just two cores instead of four)
- for multi-machine scenario, refer to uba/Arnold/Sources/BootstrapArnold/HowToRun.txt

6) Run simulation
- keyboard controls:
    'b'     Run a few brain steps of simulation as a benchmark.
    'r'     Run the simulation until paused.
    'p'     Pause the simulation.
    's'     Run single brain step of the simulation.
    'c'     Request checkpoint to be made next brain step.
    'h'     Enable/disable regular creation of checkpoint every few seconds.
    'l'     Request load balancing to be made next brain step.
    'n'     Enable/disable regular load balancing every few seconds.
    'i'     Increase number of brain steps per body step.
    'd'     Decrease number of brain steps per body step.
    'q'     Quit the core.

7) Restart simulation
- in case the previous run created the checkpoint and you want to continue from it:
    - change Visual Studio command:
    +p5 +ppn 4 +noisomalloc +LBCommOff +balancer DistributedLB +restart checkpoint ..\..\..\..\Blueprints\random_blueprint.json
    - change command line command:
    core +p5 +ppn 4 +noisomalloc +LBCommOff +balancer DistributedLB +restart checkpoint ..\..\..\..\..\Blueprints\random_blueprint.json

Assumptions:
- Path to this directory does not contain any spaces (copy the scripts elsewhere if it does).
- Internet connection available to download additional packages.

Notes:
- Scripts are otherwise self-sufficient and will download everything they need.
- Scripts work solely in this directory, do not install anything and do not change the system in any way.
- In case the script cannot download some dependency from Internet, download it manually from backup at [1], put it to this directory and run the script again.

[1] https://drive.google.com/a/keenswh.com/folderview?id=0B8ONJ7bRxkISdDlVM01vVEFWRjg&usp=sharing
