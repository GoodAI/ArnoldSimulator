module brain
{
    include "common.h";

    message EmptyMsg;
    message SimulateMsg;

    group [migratable] BrainMap : CkArrayMap {
        entry BrainMap();
    };

    array [1D] BrainBase
    {
        entry BrainBase(BrainName name, BrainType type, BrainParams params);
        entry void Unload();
        entry [reductiontarget] void Unloaded();

        entry void RunSimulation(size_t brainSteps, bool untilStopped, bool runToBodyStep);
        entry void PauseSimulation();
        entry void SetBrainStepsPerBodyStep(size_t brainSteps);
        entry void UpdateRegionOfInterest(Boxes roiBoxes);
        entry void UpdateObservers(Observers observers);
        entry void UpdateRegionBox(RegionIndex regIdx, Box3D box);
        entry void RequestSimulationState(RequestId requestId, bool immediately, bool flushRequests);
        entry void RequestViewportUpdate(RequestId requestId, bool full, bool flushRequests);
        entry void EnableRegularCheckpoints(std::string directoryName, size_t brainStepInterval);
        entry void DisableRegularCheckpoints();
        entry void RequestOneTimeCheckpoint(std::string directoryName);
        entry void EnableRegularLoadBalancing(double secondsInterval);
        entry void DisableRegularLoadBalancing();
        entry void RequestOneTimeLoadBalancing();

        entry void Simulate();
        entry void SimulateBrainControl();
        entry void SimulateBrainControlDone();
        entry void SimulateAddRegions();
        entry void SimulateAddRegionsDone();
        entry void SimulateRepositionRegions();
        entry void SimulateRepositionRegionsDone();
        entry void SimulateAddConnectors();
        entry void SimulateAddConnectorsDone();
        entry void SimulateAddRemoveConnections();
        entry void SimulateAddRemoveConnectionsDone();
        entry void SimulateRemoveConnectors();
        entry void SimulateRemoveConnectorsDone();
        entry void SimulateRemoveRegions();
        entry void SimulateRemoveRegionsDone();
        entry void SimulateRegionPrepareTopologyChange();
        entry [reductiontarget] void SimulateRegionPrepareTopologyChangeDone(size_t deletedNeurons);
        entry void SimulateRegionCommitTopologyChange();
        entry [reductiontarget] void SimulateRegionCommitTopologyChangeDone();
        entry void SimulateAllTopologyChangesDelivered();
        entry void SimulateBodySimulate();
        entry void SimulateBodySimulateDone();
        entry void SimulateRegionPrepareToSimulate();
        entry [reductiontarget] void SimulateRegionPrepareToSimulateDone(size_t triggeredNeurons);
        entry void SimulateRegionSimulate();
        entry [reductiontarget] void SimulateRegionSimulateDone(CkReductionMsg *msg);
        entry void SimulateAllSpikesDelivered();
        entry void SimulateDone();
        entry void SimulateCheckpoint();
        entry void SimulateCheckpointDone();
    };   	
};
