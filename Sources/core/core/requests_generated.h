// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_REQUESTS_GOODAI_ARNOLD_NETWORK_H_
#define FLATBUFFERS_GENERATED_REQUESTS_GOODAI_ARNOLD_NETWORK_H_

#include "flatbuffers/flatbuffers.h"


namespace GoodAI {
namespace Arnold {
namespace Network {

struct CommandRequest;
struct GetStateRequest;
struct RequestMessage;

enum CommandType {
  CommandType_Load = 0,
  CommandType_Run = 1,
  CommandType_Pause = 2,
  CommandType_Clear = 3,
  CommandType_Shutdown = 4,
  CommandType_MIN = CommandType_Load,
  CommandType_MAX = CommandType_Shutdown
};

inline const char **EnumNamesCommandType() {
  static const char *names[] = { "Load", "Run", "Pause", "Clear", "Shutdown", nullptr };
  return names;
}

inline const char *EnumNameCommandType(CommandType e) { return EnumNamesCommandType()[static_cast<int>(e)]; }

enum Request {
  Request_NONE = 0,
  Request_CommandRequest = 1,
  Request_GetStateRequest = 2,
  Request_MIN = Request_NONE,
  Request_MAX = Request_GetStateRequest
};

inline const char **EnumNamesRequest() {
  static const char *names[] = { "NONE", "CommandRequest", "GetStateRequest", nullptr };
  return names;
}

inline const char *EnumNameRequest(Request e) { return EnumNamesRequest()[static_cast<int>(e)]; }

inline bool VerifyRequest(flatbuffers::Verifier &verifier, const void *union_obj, Request type);

struct CommandRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_COMMAND = 4,
    VT_STEPSTORUN = 6
  };
  CommandType command() const { return static_cast<CommandType>(GetField<int8_t>(VT_COMMAND, 0)); }
  uint32_t stepsToRun() const { return GetField<uint32_t>(VT_STEPSTORUN, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_COMMAND) &&
           VerifyField<uint32_t>(verifier, VT_STEPSTORUN) &&
           verifier.EndTable();
  }
};

struct CommandRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_command(CommandType command) { fbb_.AddElement<int8_t>(CommandRequest::VT_COMMAND, static_cast<int8_t>(command), 0); }
  void add_stepsToRun(uint32_t stepsToRun) { fbb_.AddElement<uint32_t>(CommandRequest::VT_STEPSTORUN, stepsToRun, 0); }
  CommandRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  CommandRequestBuilder &operator=(const CommandRequestBuilder &);
  flatbuffers::Offset<CommandRequest> Finish() {
    auto o = flatbuffers::Offset<CommandRequest>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<CommandRequest> CreateCommandRequest(flatbuffers::FlatBufferBuilder &_fbb,
   CommandType command = CommandType_Load,
   uint32_t stepsToRun = 0) {
  CommandRequestBuilder builder_(_fbb);
  builder_.add_stepsToRun(stepsToRun);
  builder_.add_command(command);
  return builder_.Finish();
}

struct GetStateRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct GetStateRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  GetStateRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  GetStateRequestBuilder &operator=(const GetStateRequestBuilder &);
  flatbuffers::Offset<GetStateRequest> Finish() {
    auto o = flatbuffers::Offset<GetStateRequest>(fbb_.EndTable(start_, 0));
    return o;
  }
};

inline flatbuffers::Offset<GetStateRequest> CreateGetStateRequest(flatbuffers::FlatBufferBuilder &_fbb) {
  GetStateRequestBuilder builder_(_fbb);
  return builder_.Finish();
}

struct RequestMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_REQUEST_TYPE = 4,
    VT_REQUEST = 6
  };
  Request request_type() const { return static_cast<Request>(GetField<uint8_t>(VT_REQUEST_TYPE, 0)); }
  const void *request() const { return GetPointer<const void *>(VT_REQUEST); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_REQUEST_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_REQUEST) &&
           VerifyRequest(verifier, request(), request_type()) &&
           verifier.EndTable();
  }
};

struct RequestMessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_request_type(Request request_type) { fbb_.AddElement<uint8_t>(RequestMessage::VT_REQUEST_TYPE, static_cast<uint8_t>(request_type), 0); }
  void add_request(flatbuffers::Offset<void> request) { fbb_.AddOffset(RequestMessage::VT_REQUEST, request); }
  RequestMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  RequestMessageBuilder &operator=(const RequestMessageBuilder &);
  flatbuffers::Offset<RequestMessage> Finish() {
    auto o = flatbuffers::Offset<RequestMessage>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<RequestMessage> CreateRequestMessage(flatbuffers::FlatBufferBuilder &_fbb,
   Request request_type = Request_NONE,
   flatbuffers::Offset<void> request = 0) {
  RequestMessageBuilder builder_(_fbb);
  builder_.add_request(request);
  builder_.add_request_type(request_type);
  return builder_.Finish();
}

inline bool VerifyRequest(flatbuffers::Verifier &verifier, const void *union_obj, Request type) {
  switch (type) {
    case Request_NONE: return true;
    case Request_CommandRequest: return verifier.VerifyTable(reinterpret_cast<const CommandRequest *>(union_obj));
    case Request_GetStateRequest: return verifier.VerifyTable(reinterpret_cast<const GetStateRequest *>(union_obj));
    default: return false;
  }
}

inline const GoodAI::Arnold::Network::RequestMessage *GetRequestMessage(const void *buf) { return flatbuffers::GetRoot<GoodAI::Arnold::Network::RequestMessage>(buf); }

inline bool VerifyRequestMessageBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<GoodAI::Arnold::Network::RequestMessage>(); }

inline void FinishRequestMessageBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<GoodAI::Arnold::Network::RequestMessage> root) { fbb.Finish(root); }

}  // namespace Network
}  // namespace Arnold
}  // namespace GoodAI

#endif  // FLATBUFFERS_GENERATED_REQUESTS_GOODAI_ARNOLD_NETWORK_H_
