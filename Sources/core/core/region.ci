module region
{
    include "common.h";
    include "spike.h";
    include "synapse.h";

    extern module brain;

    group [migratable] RegionMap : CkArrayMap {
        entry RegionMap();
    };

    array [1D] RegionBase
    {
        entry RegionBase(RegionType type, RegionParams params);

        entry void CreateInput(ConnectorName name, NeuronType neuronType, NeuronParams neuronParams, size_t neuronCount);
        entry void DeleteInput(ConnectorName name);
        entry void ConnectInput(ConnectorName name, RemoteConnector destination);
        entry void DisconnectInput(ConnectorName name, RemoteConnector destination);

        entry void CreateOutput(ConnectorName name, NeuronType neuronType, NeuronParams neuronParams, size_t neuronCount);
        entry void DeleteOutput(ConnectorName name);
        entry void ConnectOutput(ConnectorName name, RemoteConnector destination);
        entry void DisconnectOutput(ConnectorName name, RemoteConnector destination);

        entry void ReceiveSensoMotoricData(Direction direction, ConnectorName connectorName, Spike::BrainSource data);
        entry void EnqueueSensoMotoricSpike(NeuronId receiver, Spike::Data data);

        entry void ChangeTopology();
        entry void Simulate(SimulateMsg *msg);

        entry [reductiontarget] void NeuronSimulateDone(CkReductionMsg *msg);
    };   	
};
