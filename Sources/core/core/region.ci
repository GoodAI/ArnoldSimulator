module region
{
    include "common.h";
    include "spike.h";
    include "synapse.h";

    group [migratable] RegionMap : CkArrayMap {
        entry RegionMap();
    };

    array [1D] RegionBase
    {
        entry RegionBase(RegionName name, RegionType type, Box3D box, RegionParams params);
        entry void Unload();

        entry void CreateInput(ConnectorName name, NeuronType neuronType, NeuronParams neuronParams, size_t neuronCount);
        entry void DeleteInput(ConnectorName name);
        entry void ConnectInput(ConnectorName name, RemoteConnector destination, bool syncSynapses);
        entry void DisconnectInput(ConnectorName name, RemoteConnector destination, bool syncSynapses);
        entry void ConnectInputNeurons(ConnectorName name, NeuronId destFirstNeuron);
        entry void DisconnectInputNeurons(ConnectorName name, NeuronId destFirstNeuron);

        entry void CreateOutput(ConnectorName name, NeuronType neuronType, NeuronParams neuronParams, size_t neuronCount);
        entry void DeleteOutput(ConnectorName name);
        entry void ConnectOutput(ConnectorName name, RemoteConnector destination, bool syncSynapses);
        entry void DisconnectOutput(ConnectorName name, RemoteConnector destination, bool syncSynapses);
        entry void ConnectOutputNeurons(ConnectorName name, NeuronId destFirstNeuron);
        entry void DisconnectOutputNeurons(ConnectorName name, NeuronId destFirstNeuron);

        entry void ReceiveSensoMotoricData(Direction direction, ConnectorName connectorName, Spike::BrainSource data);
        entry void EnqueueSensoMotoricSpike(NeuronId receiver, Spike::Data data);
        entry void TriggerRemotelyTriggeredNeuron(NeuronId neuronId);

        entry void SetBox(Box3D box);
        entry void Unlink();
        entry void PrepareTopologyChange(size_t brainStep, bool doProgress);
        entry void CommitTopologyChange();
        entry void ReportTriggeredNeurons();
        entry [nokeep] void Simulate(SimulateMsg *msg);

        entry [reductiontarget] void NeuronFlipSpikeQueuesDone(CkReductionMsg *msg);
        entry [reductiontarget] void NeuronSimulateDone(CkReductionMsg *msg);
    };   	
};
