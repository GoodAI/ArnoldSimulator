// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Requests.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GoodAI.Arnold.Network {

  /// <summary>Holder for reflection information generated from Requests.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class RequestsReflection {

    #region Descriptor
    /// <summary>File descriptor for Requests.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RequestsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5SZXF1ZXN0cy5wcm90bxIVR29vZEFJLkFybm9sZC5OZXR3b3JrIg8KDUJs",
            "dWVwcmludERhdGEi5wEKDkNvbW1hbmRSZXF1ZXN0EkIKB0NvbW1hbmQYASAB",
            "KA4yMS5Hb29kQUkuQXJub2xkLk5ldHdvcmsuQ29tbWFuZFJlcXVlc3QuQ29t",
            "bWFuZFR5cGUSEgoKU3RlcHNUb1J1bhgCIAEoBRI3CglCbHVlcHJpbnQYAyAB",
            "KAsyJC5Hb29kQUkuQXJub2xkLk5ldHdvcmsuQmx1ZXByaW50RGF0YSJECgtD",
            "b21tYW5kVHlwZRIICgRMb2FkEAASBwoDUnVuEAESCQoFUGF1c2UQAhIJCgVD",
            "bGVhchADEgwKCFNodXRkb3duEAQiEQoPR2V0U3RhdGVSZXF1ZXN0YgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::GoodAI.Arnold.Network.BlueprintData), global::GoodAI.Arnold.Network.BlueprintData.Parser, null, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::GoodAI.Arnold.Network.CommandRequest), global::GoodAI.Arnold.Network.CommandRequest.Parser, new[]{ "Command", "StepsToRun", "Blueprint" }, null, new[]{ typeof(global::GoodAI.Arnold.Network.CommandRequest.Types.CommandType) }, null),
            new pbr::GeneratedCodeInfo(typeof(global::GoodAI.Arnold.Network.GetStateRequest), global::GoodAI.Arnold.Network.GetStateRequest.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BlueprintData : pb::IMessage<BlueprintData> {
    private static readonly pb::MessageParser<BlueprintData> _parser = new pb::MessageParser<BlueprintData>(() => new BlueprintData());
    public static pb::MessageParser<BlueprintData> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::GoodAI.Arnold.Network.RequestsReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BlueprintData() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BlueprintData(BlueprintData other) : this() {
    }

    public BlueprintData Clone() {
      return new BlueprintData(this);
    }

    public override bool Equals(object other) {
      return Equals(other as BlueprintData);
    }

    public bool Equals(BlueprintData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(BlueprintData other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommandRequest : pb::IMessage<CommandRequest> {
    private static readonly pb::MessageParser<CommandRequest> _parser = new pb::MessageParser<CommandRequest>(() => new CommandRequest());
    public static pb::MessageParser<CommandRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::GoodAI.Arnold.Network.RequestsReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CommandRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CommandRequest(CommandRequest other) : this() {
      command_ = other.command_;
      stepsToRun_ = other.stepsToRun_;
      Blueprint = other.blueprint_ != null ? other.Blueprint.Clone() : null;
    }

    public CommandRequest Clone() {
      return new CommandRequest(this);
    }

    /// <summary>Field number for the "Command" field.</summary>
    public const int CommandFieldNumber = 1;
    private global::GoodAI.Arnold.Network.CommandRequest.Types.CommandType command_ = global::GoodAI.Arnold.Network.CommandRequest.Types.CommandType.Load;
    public global::GoodAI.Arnold.Network.CommandRequest.Types.CommandType Command {
      get { return command_; }
      set {
        command_ = value;
      }
    }

    /// <summary>Field number for the "StepsToRun" field.</summary>
    public const int StepsToRunFieldNumber = 2;
    private int stepsToRun_;
    public int StepsToRun {
      get { return stepsToRun_; }
      set {
        stepsToRun_ = value;
      }
    }

    /// <summary>Field number for the "Blueprint" field.</summary>
    public const int BlueprintFieldNumber = 3;
    private global::GoodAI.Arnold.Network.BlueprintData blueprint_;
    public global::GoodAI.Arnold.Network.BlueprintData Blueprint {
      get { return blueprint_; }
      set {
        blueprint_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CommandRequest);
    }

    public bool Equals(CommandRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Command != other.Command) return false;
      if (StepsToRun != other.StepsToRun) return false;
      if (!object.Equals(Blueprint, other.Blueprint)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Command != global::GoodAI.Arnold.Network.CommandRequest.Types.CommandType.Load) hash ^= Command.GetHashCode();
      if (StepsToRun != 0) hash ^= StepsToRun.GetHashCode();
      if (blueprint_ != null) hash ^= Blueprint.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Command != global::GoodAI.Arnold.Network.CommandRequest.Types.CommandType.Load) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Command);
      }
      if (StepsToRun != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StepsToRun);
      }
      if (blueprint_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Blueprint);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Command != global::GoodAI.Arnold.Network.CommandRequest.Types.CommandType.Load) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Command);
      }
      if (StepsToRun != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StepsToRun);
      }
      if (blueprint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Blueprint);
      }
      return size;
    }

    public void MergeFrom(CommandRequest other) {
      if (other == null) {
        return;
      }
      if (other.Command != global::GoodAI.Arnold.Network.CommandRequest.Types.CommandType.Load) {
        Command = other.Command;
      }
      if (other.StepsToRun != 0) {
        StepsToRun = other.StepsToRun;
      }
      if (other.blueprint_ != null) {
        if (blueprint_ == null) {
          blueprint_ = new global::GoodAI.Arnold.Network.BlueprintData();
        }
        Blueprint.MergeFrom(other.Blueprint);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            command_ = (global::GoodAI.Arnold.Network.CommandRequest.Types.CommandType) input.ReadEnum();
            break;
          }
          case 16: {
            StepsToRun = input.ReadInt32();
            break;
          }
          case 26: {
            if (blueprint_ == null) {
              blueprint_ = new global::GoodAI.Arnold.Network.BlueprintData();
            }
            input.ReadMessage(blueprint_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CommandRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum CommandType {
        Load = 0,
        Run = 1,
        Pause = 2,
        Clear = 3,
        Shutdown = 4,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetStateRequest : pb::IMessage<GetStateRequest> {
    private static readonly pb::MessageParser<GetStateRequest> _parser = new pb::MessageParser<GetStateRequest>(() => new GetStateRequest());
    public static pb::MessageParser<GetStateRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::GoodAI.Arnold.Network.RequestsReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GetStateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GetStateRequest(GetStateRequest other) : this() {
    }

    public GetStateRequest Clone() {
      return new GetStateRequest(this);
    }

    public override bool Equals(object other) {
      return Equals(other as GetStateRequest);
    }

    public bool Equals(GetStateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(GetStateRequest other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
