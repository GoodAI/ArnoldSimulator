// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Requests.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GoodAI.Arnold.Net {

  /// <summary>Holder for reflection information generated from Requests.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class RequestsReflection {

    #region Descriptor
    /// <summary>File descriptor for Requests.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RequestsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5SZXF1ZXN0cy5wcm90bxIRR29vZEFJLkFybm9sZC5OZXQicQoHQ29tbWFu",
            "ZBI3CgdDb21tYW5kGAEgASgOMiYuR29vZEFJLkFybm9sZC5OZXQuQ29tbWFu",
            "ZC5Db21tYW5kVHlwZSItCgtDb21tYW5kVHlwZRIJCgVTdGFydBAAEgkKBVBh",
            "dXNlEAESCAoEU3RvcBACIgoKCEdldFN0YXRlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::GoodAI.Arnold.Net.Command), global::GoodAI.Arnold.Net.Command.Parser, new[]{ "Command_" }, null, new[]{ typeof(global::GoodAI.Arnold.Net.Command.Types.CommandType) }, null),
            new pbr::GeneratedCodeInfo(typeof(global::GoodAI.Arnold.Net.GetState), global::GoodAI.Arnold.Net.GetState.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Command : pb::IMessage<Command> {
    private static readonly pb::MessageParser<Command> _parser = new pb::MessageParser<Command>(() => new Command());
    public static pb::MessageParser<Command> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::GoodAI.Arnold.Net.RequestsReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Command() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Command(Command other) : this() {
      command_ = other.command_;
    }

    public Command Clone() {
      return new Command(this);
    }

    /// <summary>Field number for the "Command" field.</summary>
    public const int Command_FieldNumber = 1;
    private global::GoodAI.Arnold.Net.Command.Types.CommandType command_ = global::GoodAI.Arnold.Net.Command.Types.CommandType.Start;
    public global::GoodAI.Arnold.Net.Command.Types.CommandType Command_ {
      get { return command_; }
      set {
        command_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Command);
    }

    public bool Equals(Command other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Command_ != other.Command_) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Command_ != global::GoodAI.Arnold.Net.Command.Types.CommandType.Start) hash ^= Command_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Command_ != global::GoodAI.Arnold.Net.Command.Types.CommandType.Start) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Command_);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Command_ != global::GoodAI.Arnold.Net.Command.Types.CommandType.Start) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Command_);
      }
      return size;
    }

    public void MergeFrom(Command other) {
      if (other == null) {
        return;
      }
      if (other.Command_ != global::GoodAI.Arnold.Net.Command.Types.CommandType.Start) {
        Command_ = other.Command_;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            command_ = (global::GoodAI.Arnold.Net.Command.Types.CommandType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Command message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum CommandType {
        Start = 0,
        Pause = 1,
        Stop = 2,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetState : pb::IMessage<GetState> {
    private static readonly pb::MessageParser<GetState> _parser = new pb::MessageParser<GetState>(() => new GetState());
    public static pb::MessageParser<GetState> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::GoodAI.Arnold.Net.RequestsReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public GetState() {
      OnConstruction();
    }

    partial void OnConstruction();

    public GetState(GetState other) : this() {
    }

    public GetState Clone() {
      return new GetState(this);
    }

    public override bool Equals(object other) {
      return Equals(other as GetState);
    }

    public bool Equals(GetState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(GetState other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
